---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcCidrBlock:
    Description: Enter the CIDR block for the VPC (e.g., 10.0.0.0/16)
    Type: String
  PublicSubnetSize:
    Description: Enter the size (mask) for the public subnets (e.g., 24)
    Type: Number
    MinValue: 16
    MaxValue: 28
    Default: 24
  PrivateSubnetSize:
    Description: Enter the size (mask) for the private subnets (e.g., 24)
    Type: Number
    MinValue: 16
    MaxValue: 28
    Default: 24
  EnableNATGateways:
    Description: Enable High Availability NAT Gateways?
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  EnableServiceEndpoints:
    Description: Enable Service Endpoints?
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  Tags:
    Description: Tags to be applied to resources
    Type: String
Conditions:
  EnableEndpoints: !Equals [!Ref EnableServiceEndpoints, true]
  EnableNATGateways: !Equals [!Ref EnableNATGateways, true]
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: !Ref Tags
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: !Ref Tags
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags: !Ref Tags
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags: !Ref Tags
  PrivateSubnetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If [EnableNATGateways, !Ref PublicNATGateway1, !Ref InternetGateway]
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidrBlock, !Ref PublicSubnetSize, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: !Ref Tags
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidrBlock, !Ref PublicSubnetSize, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: !Ref Tags
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidrBlock, !Ref PrivateSubnetSize, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: !Ref Tags
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidrBlock, !Ref PrivateSubnetSize, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: !Ref Tags
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PublicNATGateway1:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VPCGatewayAttachment
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt PublicEIP1.AllocationId
      Tags: !Ref Tags
  PublicNATGateway2:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: VPCGatewayAttachment
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt PublicEIP2.AllocationId
      Tags: !Ref Tags
  PublicEIP1:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags: !Ref Tags
  PublicEIP2:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags: !Ref Tags
  S3VpcEndpoint:
    Condition: EnableEndpoints
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PublicRouteTable
      Tags: !Ref Tags
  DynamoDBVpcEndpoint:
    Condition: EnableEndpoints
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      RouteTableIds:
        - !Ref PrivateRouteTable
      Tags: !Ref Tags
Outputs:
  VpcId:
    Description: The ID of the VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: The IDs of the public subnets
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  PrivateSubnets:
    Description: The IDs of the private subnets
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  NATGateways:
    Description: The IDs of the NAT Gateways
    Value: !If [EnableNATGateways, !Join [',', [!Ref PublicNATGateway1, !Ref PublicNATGateway2]], 'N/A']
  ServiceEndpoints:
    Description: The IDs of the enabled service endpoints
    Value: !If [EnableServiceEndpoints, !Join [',', [!Ref S3VpcEndpoint, !Ref DynamoDBVpcEndpoint]], 'N/A']
